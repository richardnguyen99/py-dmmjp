name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [published]

env:
  PYTHON_VERSION: "3.8"
  APP_ID: ${{ secrets.APP_ID }}
  AFFILIATE_ID: ${{ secrets.AFF_ID }}

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run type checking with mypy
        run: |
          if [ "${{ matrix.python-version }}" == "3.8" ]; then
            mypy py_dmmjp --exclude '/.*async.*\.py$'
          else
            mypy py_dmmjp
          fi
        shell: bash

      - name: Run linting with pylint
        run: |
          if [ "${{ matrix.python-version }}" == "3.8" ]; then
            pylint py_dmmjp --ignore-patterns='.*async.*\.py'
          else
            pylint py_dmmjp
          fi
        shell: bash

      - name: Check code formatting with black
        run: |
          black --check py_dmmjp tests

      - name: Check import sorting with isort
        run: |
          isort --check-only py_dmmjp tests

      - name: Make envfile
        uses: SpicyPizza/create-envfile@v1
        with:
          envkey_APP_ID: "something"
          envkey_AFF_ID: "something"
          file_name: .env

      - name: Run tests with pytest
        env:
          APP_ID: ${{ secrets.APP_ID }}
          AFF_ID: ${{ secrets.AFF_ID }}
        run: |
          if [ "${{ matrix.python-version }}" == "3.8" ]; then
            pytest tests/ -v --cov=py_dmmjp --cov-report=xml --cov-report=html --cov-fail-under=90 --cov-branch --ignore-glob='*async*' --cov-omit=py_dmmjp/async_*.py
          else
            pytest tests/ -v --cov=py_dmmjp --cov-report=xml --cov-report=html --cov-fail-under=90 --cov-branch -o asyncio_mode=auto -o assyncio_default_fixture_loop_scope=session
          fi
        shell: bash

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] safety

      - name: Run security scan with bandit
        run: |
          bandit -r py_dmmjp -f json -o bandit-report.json --verbose

      - name: Run Safety CLI to check for vulnerabilities
        uses: pyupio/safety-action@v1
        with:
          api-key: ${{ secrets.SAFETY_API_KEY }}

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package with twine
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: startsWith(github.ref, 'refs/tags/')

    environment:
      name: pypi
      url: https://pypi.org/p/py-dmmjp

    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish distribution üì¶ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1

  publish-test:
    name: Publish Python üêç distribution üì¶ to TestPyPIPublish to Test PyPI
    runs-on: ubuntu-latest
    needs: [test, security, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    environment:
      name: test-pypi
      url: https://test.pypi.org/p/py-dmmjp

    permissions:
      id-token: write # IMPORTANT: mandatory for trusted publishing

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v4
        with:
          name: dist
          path: dist/
      - name: Publish distribution üì¶ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
